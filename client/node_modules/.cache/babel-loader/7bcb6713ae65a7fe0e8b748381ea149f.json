{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAILURE, GET_USER, LOGOUT_USER } from './types';\nimport axios from 'axios';\nexport const login = loginInfo => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  console.log('Request made');\n\n  try {\n    console.log('Login info before send' + loginInfo);\n    const res = await axios.post('/api/auth', loginInfo, config);\n    const returned = res.data;\n    console.log(returned);\n\n    if (returned[1].success) {\n      dispatch(loginSuccess(returned[0]));\n      dispatch(getUser());\n    }\n  } catch (err) {\n    dispatch(loginFailure(err));\n  }\n};\nexport const loginSuccess = token => ({\n  type: LOGIN_SUCCESS,\n  payload: token\n});\nexport const loginFailure = error => ({\n  type: LOGIN_FAILURE,\n  payload: error\n}); //Sent to recieve the users information, token is sent through headers attached by functon\n//that runs constantly during the application session, checking against the token from local storage\n//and appending it to every header request to API. \n// @ return -> users: name, email, university\n\nexport const getUser = () => async dispatch => {\n  try {\n    console.log('Getting user');\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: GET_USER,\n      payload: res.data\n    });\n  } catch (err) {\n    //Logs user out if user returns as having no authentication or if account no longer\n    //exits, account deletion is example.\n    dispatch(logout());\n  }\n}; //Sets authentication token pushed into state through login/register (occurs in store) to headers, \n//enabling requests to private routes with auth middleware\n\nexport const setHeader = token => {\n  if (token) {\n    console.log('Header set with: ' + token);\n    axios.defaults.headers.common['x-auth-token'] = token;\n    localStorage.setItem('token', token);\n  } else if (!token) {\n    delete axios.defaults.headers.common['x-auth-token'];\n    localStorage.removeItem('token');\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch(logoutUser());\n  console.log('initiating dispatch');\n};\nexport const logoutUser = () => ({\n  type: LOGOUT_USER\n});","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/actions/login.js"],"names":["LOGIN_SUCCESS","LOGIN_FAILURE","GET_USER","LOGOUT_USER","axios","login","loginInfo","dispatch","config","headers","console","log","res","post","returned","data","success","loginSuccess","getUser","err","loginFailure","token","type","payload","error","get","logout","setHeader","defaults","common","localStorage","setItem","removeItem","logoutUser"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,QAAvC,EAAiDC,WAAjD,QAAoE,SAApE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAIC,SAAD,IAAe,MAAMC,QAAN,IAAkB;AAClD,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;;AAEA,MAAI;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BL,SAAvC;AACA,UAAMM,GAAG,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,WAAX,EAAwBP,SAAxB,EAAmCE,MAAnC,CAAlB;AACA,UAAMM,QAAQ,GAAGF,GAAG,CAACG,IAArB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;;AACA,QAAIA,QAAQ,CAAC,CAAD,CAAR,CAAYE,OAAhB,EAAyB;AACrBT,MAAAA,QAAQ,CAACU,YAAY,CAACH,QAAQ,CAAC,CAAD,CAAT,CAAb,CAAR;AACAP,MAAAA,QAAQ,CAACW,OAAO,EAAR,CAAR;AACH;AACJ,GATD,CASE,OAAOC,GAAP,EAAY;AACVZ,IAAAA,QAAQ,CAACa,YAAY,CAACD,GAAD,CAAb,CAAR;AACH;AACJ,CApBM;AAsBP,OAAO,MAAMF,YAAY,GAAII,KAAD,KAAY;AACpCC,EAAAA,IAAI,EAAEtB,aAD8B;AAEpCuB,EAAAA,OAAO,EAAEF;AAF2B,CAAZ,CAArB;AAKP,OAAO,MAAMD,YAAY,GAAII,KAAD,KAAY;AACpCF,EAAAA,IAAI,EAAErB,aAD8B;AAEpCsB,EAAAA,OAAO,EAAEC;AAF2B,CAAZ,CAArB,C,CAMP;AACA;AACA;AACA;;AACA,OAAO,MAAMN,OAAO,GAAG,MAAM,MAAMX,QAAN,IAAkB;AAC3C,MAAI;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,UAAMC,GAAG,GAAG,MAAMR,KAAK,CAACqB,GAAN,CAAU,WAAV,CAAlB;AACAlB,IAAAA,QAAQ,CAAC;AACLe,MAAAA,IAAI,EAAEpB,QADD;AAELqB,MAAAA,OAAO,EAAEX,GAAG,CAACG;AAFR,KAAD,CAAR;AAIH,GAPD,CAOE,OAAOI,GAAP,EAAY;AACV;AACA;AACAZ,IAAAA,QAAQ,CAACmB,MAAM,EAAP,CAAR;AACH;AACJ,CAbM,C,CAgBP;AACA;;AACA,OAAO,MAAMC,SAAS,GAAIN,KAAD,IAAW;AAChC,MAAIA,KAAJ,EAAW;AACPX,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBU,KAAlC;AACAjB,IAAAA,KAAK,CAACwB,QAAN,CAAenB,OAAf,CAAuBoB,MAAvB,CAA8B,cAA9B,IAAgDR,KAAhD;AACAS,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BV,KAA9B;AACH,GAJD,MAIO,IAAI,CAACA,KAAL,EAAY;AACf,WAAOjB,KAAK,CAACwB,QAAN,CAAenB,OAAf,CAAuBoB,MAAvB,CAA8B,cAA9B,CAAP;AACAC,IAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACH;AACJ,CATM;AAWP,OAAO,MAAMN,MAAM,GAAG,MAAMnB,QAAQ,IAAI;AACpCA,EAAAA,QAAQ,CAAC0B,UAAU,EAAX,CAAR;AACAvB,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,CAHM;AAKP,OAAO,MAAMsB,UAAU,GAAG,OAAO;AAC7BX,EAAAA,IAAI,EAAEnB;AADuB,CAAP,CAAnB","sourcesContent":["import { LOGIN_SUCCESS, LOGIN_FAILURE, GET_USER, LOGOUT_USER } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const login = (loginInfo) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    console.log('Request made');\r\n\r\n    try {\r\n        console.log('Login info before send' + loginInfo);\r\n        const res = await axios.post('/api/auth', loginInfo, config);\r\n        const returned = res.data;\r\n        console.log(returned);\r\n        if (returned[1].success) {\r\n            dispatch(loginSuccess(returned[0]));\r\n            dispatch(getUser());\r\n        }\r\n    } catch (err) {\r\n        dispatch(loginFailure(err));\r\n    }\r\n}\r\n\r\nexport const loginSuccess = (token) => ({\r\n    type: LOGIN_SUCCESS,\r\n    payload: token\r\n})\r\n\r\nexport const loginFailure = (error) => ({\r\n    type: LOGIN_FAILURE,\r\n    payload: error\r\n})\r\n\r\n\r\n//Sent to recieve the users information, token is sent through headers attached by functon\r\n//that runs constantly during the application session, checking against the token from local storage\r\n//and appending it to every header request to API. \r\n// @ return -> users: name, email, university\r\nexport const getUser = () => async dispatch => {\r\n    try {\r\n        console.log('Getting user');\r\n        const res = await axios.get('/api/auth');\r\n        dispatch({\r\n            type: GET_USER,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n        //Logs user out if user returns as having no authentication or if account no longer\r\n        //exits, account deletion is example.\r\n        dispatch(logout());\r\n    }\r\n}\r\n\r\n\r\n//Sets authentication token pushed into state through login/register (occurs in store) to headers, \r\n//enabling requests to private routes with auth middleware\r\nexport const setHeader = (token) => {\r\n    if (token) {\r\n        console.log('Header set with: ' + token);\r\n        axios.defaults.headers.common['x-auth-token'] = token;\r\n        localStorage.setItem('token', token);\r\n    } else if (!token) {\r\n        delete axios.defaults.headers.common['x-auth-token'];\r\n        localStorage.removeItem('token');\r\n    }\r\n}\r\n\r\nexport const logout = () => dispatch => {\r\n    dispatch(logoutUser());\r\n    console.log('initiating dispatch');\r\n}\r\n\r\nexport const logoutUser = () => ({\r\n    type: LOGOUT_USER\r\n})"]},"metadata":{},"sourceType":"module"}