{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanl\\\\Desktop\\\\crudTest\\\\client\\\\src\\\\components\\\\template\\\\Landpage.js\";\nimport React, { Fragment, useState } from 'react';\nimport UniversityView from './UniversityView';\nimport { connect } from 'react-redux';\nimport images from './images.js';\nimport SortDropdown from './SortDropdown';\n\nconst Landpage = props => {\n  const [modalInfo, modalChange] = useState({\n    modalOpen: false,\n    details: null\n  }); // const [sort, sortSelect] = useState({\n  //     selected: 'total'\n  // });\n\n  const openSelection = e => {\n    const selected = e.currentTarget.value;\n    const data = props.universities[0].find(x => x._id === selected);\n    handleModalOpen(data); // modalChange({ ...modalInfo, details: data })\n  };\n\n  const handleModalOpen = data => {\n    modalChange(prevState => {\n      return {\n        modalOpen: !prevState.modalOpen,\n        details: data\n      };\n    });\n  }; // const changeSort = (e) => sortSelect({ selected: e.target.value })\n\n\n  console.log(modalInfo);\n  const universityCheck = [];\n\n  if (!props.loading) {\n    function universityChecker() {\n      for (var i = 0; i < props.universities[0].length; i++) {\n        var obj = props.universities[0][i];\n        universityCheck.push(obj);\n      }\n    }\n\n    function sortBy(type) {\n      return function (a, b) {\n        return a.scores[type] + b.scores[type];\n      };\n    }\n\n    universityChecker(); //     if (universityCheck[1]) {\n    //         console.log(universityCheck.sort(sortBy(sort.selected)));\n    //     }\n    // }\n    // console.log(sort);\n\n    return (//Renders landpage after app level state fetch has been returned\n      !props.loading ? /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(UniversityView, {\n        details: modalInfo.details,\n        currentState: modalInfo.modalOpen,\n        handleModalOpen: handleModalOpen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, \"FIND YOUR UNIVERSITY BASED ON SOCIAL SCORE & QUALITY OF LIFE FEEDBACK FROM REAL STUDENTS\")), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"gridContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"section\", {\n        className: \"landing\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }\n      }, universityCheck.map((obj, index) => {\n        const uniImage = images.filter(images => images.id === obj.img); // console.log(uniImage[0].src);\n\n        return /*#__PURE__*/React.createElement(\"button\", {\n          className: \"universityContainer\",\n          key: index,\n          value: obj._id,\n          onClick: e => {\n            openSelection(e);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 40\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: uniImage[0].src,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"name\",\n          key: obj._id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 41\n          }\n        }, \"#\", index + 1, \"  \", obj.name)), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"points\",\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 37\n          }\n        }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 74\n          }\n        }, obj.scores.total.toFixed(2), \" / 5\"), \" \"));\n      })))) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }\n      }, \"LOADING\"))\n    );\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.uniFetch.loading,\n    universities: state.uniFetch.universities\n  };\n};\n\nexport default connect(mapStateToProps)(Landpage);","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/components/template/Landpage.js"],"names":["React","Fragment","useState","UniversityView","connect","images","SortDropdown","Landpage","props","modalInfo","modalChange","modalOpen","details","openSelection","e","selected","currentTarget","value","data","universities","find","x","_id","handleModalOpen","prevState","console","log","universityCheck","loading","universityChecker","i","length","obj","push","sortBy","type","a","b","scores","map","index","uniImage","filter","id","img","src","name","total","toFixed","mapStateToProps","state","uniFetch"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport UniversityView from './UniversityView';\r\nimport { connect } from 'react-redux';\r\nimport images from './images.js';\r\nimport SortDropdown from './SortDropdown';\r\n\r\nconst Landpage = (props) => {\r\n\r\n    const [modalInfo, modalChange] = useState({\r\n        modalOpen: false,\r\n        details: null,\r\n\r\n    })\r\n\r\n    // const [sort, sortSelect] = useState({\r\n    //     selected: 'total'\r\n    // });\r\n\r\n    const openSelection = (e) => {\r\n        const selected = e.currentTarget.value;\r\n        const data = props.universities[0].find(x => x._id === selected);\r\n        handleModalOpen(data);\r\n        // modalChange({ ...modalInfo, details: data })\r\n    }\r\n\r\n    const handleModalOpen = (data) => {\r\n        modalChange((prevState) => {\r\n            return {\r\n                modalOpen: !prevState.modalOpen,\r\n                details: data\r\n            }\r\n        })\r\n    }\r\n\r\n    // const changeSort = (e) => sortSelect({ selected: e.target.value })\r\n\r\n    console.log(modalInfo);\r\n    const universityCheck = [];\r\n    if (!props.loading) {\r\n        function universityChecker() {\r\n            for (var i = 0; i < props.universities[0].length; i++) {\r\n                var obj = props.universities[0][i];\r\n                universityCheck.push(obj);\r\n            }\r\n        }\r\n\r\n        function sortBy(type) {\r\n            return function (a, b) {\r\n                return a.scores[type] + b.scores[type];\r\n            }\r\n        }\r\n        universityChecker();\r\n\r\n        //     if (universityCheck[1]) {\r\n        //         console.log(universityCheck.sort(sortBy(sort.selected)));\r\n        //     }\r\n        // }\r\n\r\n        // console.log(sort);\r\n\r\n        return (\r\n            //Renders landpage after app level state fetch has been returned\r\n            (!props.loading ? (\r\n                < Fragment >\r\n                    <Fragment>\r\n                        <UniversityView\r\n                            details={modalInfo.details}\r\n                            currentState={modalInfo.modalOpen}\r\n                            handleModalOpen={handleModalOpen}>\r\n                        </UniversityView >\r\n                    </Fragment>\r\n                    <div className=\"header\">\r\n                        <h1>FIND YOUR UNIVERSITY BASED ON SOCIAL SCORE & QUALITY OF LIFE FEEDBACK FROM REAL STUDENTS</h1>\r\n                    </div>\r\n                    <div>\r\n                        {/* <SortDropdown sortChange={changeSort} /> */}\r\n                    </div>\r\n                    < div className=\"gridContainer\" >\r\n                        <section className=\"landing\">\r\n                            {universityCheck.map((obj, index) => {\r\n                                const uniImage = images.filter(images => images.id === obj.img);\r\n                                // console.log(uniImage[0].src);\r\n                                return <button className=\"universityContainer\" key={index} value={obj._id} onClick={e => { openSelection(e) }}>\r\n                                    <img src={uniImage[0].src}></img>\r\n                                    <div className=\"name\" key={obj._id}>\r\n                                        <p>#{index + 1}  {obj.name}</p>\r\n                                    </div>\r\n                                    <div className=\"points\" key={index}> <b>{obj.scores.total.toFixed(2)} / 5</b> </div>\r\n                                </button>\r\n                            })}\r\n                        </section>\r\n                    </div >\r\n                </Fragment >\r\n            ) : (<div><h1>LOADING</h1></div>))\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.uniFetch.loading,\r\n        universities: state.uniFetch.universities\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Landpage);\r\n"]},"metadata":{},"sourceType":"module"}