{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanl\\\\Desktop\\\\crudTest\\\\client\\\\src\\\\components\\\\auth\\\\Register.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport UniversityList from './UniversityList';\n\nconst Register = () => {\n  // use state initialises objects default format. hook runs function on the given object\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    passwordConfirm: ''\n  }); // state = {\n  //     loading: true,\n  //     options: [null],\n  //     selected: ''\n  // }\n\n  const [dropdown, setDropdown] = useState({\n    loading: true,\n    options: [null],\n    selected: ''\n  }); //Will run error declaring missing dependacy, however I only want the function to run once after render,\n  //so warning should be ignored.\n\n  useEffect(() => {\n    const fetchList = async () => {\n      try {\n        const response = await axios.get('/api/university'); // Recieved errors in get reponse, had to convert to string to place in JS object array.\n\n        const string = JSON.stringify(response.data.list);\n        const uni = JSON.parse(string); // Fills options with JSON request then sets loading to false which can be checked against\n\n        setDropdown({\n          selected: '',\n          options: uni,\n          loading: false\n        });\n      } catch (err) {}\n    };\n\n    fetchList();\n  }, []); // Checks agains the amount of times the uni data is called\n\n  if (dropdown.loading === false) {\n    console.log(dropdown);\n  }\n\n  const {\n    name,\n    email,\n    password,\n    passwordConfirm\n  } = formData; // const university = dropdown;\n  // function runs from event, changing relevant form data for each input by selected name and it's corresponding value\n  // ... operator preserves previous data from form, only changing states of given input\n\n  const formChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const dropdownChange = e => setDropdown({\n    [selected]: e.target.value\n  });\n\n  const formSubmit = async e => {\n    //Prevents default HTML handling, in this instance causing the page to refresh.\n    e.preventDefault();\n\n    if (password !== passwordConfirm) {\n      console.log('Passwords do not match');\n    } else {\n      console.log(formData); //Creates object using variable that stored the form data\n\n      const registerUser = {\n        name,\n        email,\n        password\n      };\n\n      try {\n        //Sets headers for the post\n        const config = {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }; //Converts JS object to JSON string format\n\n        const body = JSON.stringify(registerUser); //Runs function and stores response\n\n        const res = await axios.post('/api/users', body, config);\n        console.log(res.data);\n      } catch (err) {\n        console.error(err.response.data);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => formSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"Name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Name\",\n    value: name,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email Address\",\n    value: email,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, \"Verify Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"passwordConfirm\",\n    placeholder: \"Verify Password\",\n    value: passwordConfirm,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(UniversityList, {\n    onChange: this.dropdownChange,\n    state: dropdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Register;","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/components/auth/Register.js"],"names":["React","Fragment","useState","useEffect","axios","UniversityList","Register","formData","setFormData","name","email","password","passwordConfirm","dropdown","setDropdown","loading","options","selected","fetchList","response","get","string","JSON","stringify","data","list","uni","parse","err","console","log","formChange","e","target","value","dropdownChange","formSubmit","preventDefault","registerUser","config","headers","body","res","post","error"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport UniversityList from './UniversityList';\r\n\r\nconst Register = () => {\r\n    // use state initialises objects default format. hook runs function on the given object\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        passwordConfirm: ''\r\n    });\r\n\r\n    // state = {\r\n    //     loading: true,\r\n    //     options: [null],\r\n    //     selected: ''\r\n    // }\r\n\r\n    const [dropdown, setDropdown] = useState({\r\n        loading: true,\r\n        options: [null],\r\n        selected: ''\r\n    })\r\n\r\n    //Will run error declaring missing dependacy, however I only want the function to run once after render,\r\n    //so warning should be ignored.\r\n\r\n    useEffect(() => {\r\n        const fetchList = async () => {\r\n            try {\r\n                const response = await axios.get('/api/university');\r\n                // Recieved errors in get reponse, had to convert to string to place in JS object array.\r\n                const string = JSON.stringify(response.data.list);\r\n                const uni = JSON.parse(string);\r\n                // Fills options with JSON request then sets loading to false which can be checked against\r\n                setDropdown({ selected: '', options: uni, loading: false });\r\n            } catch (err) {\r\n            }\r\n        }\r\n        fetchList();\r\n    }, []);\r\n\r\n    // Checks agains the amount of times the uni data is called\r\n    if (dropdown.loading === false) {\r\n        console.log(dropdown);\r\n    }\r\n\r\n\r\n\r\n    const { name, email, password, passwordConfirm } = formData;\r\n    // const university = dropdown;\r\n\r\n    // function runs from event, changing relevant form data for each input by selected name and it's corresponding value\r\n    // ... operator preserves previous data from form, only changing states of given input\r\n    const formChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    const dropdownChange = e => setDropdown({ [selected]: e.target.value })\r\n\r\n\r\n    const formSubmit = async e => {\r\n        //Prevents default HTML handling, in this instance causing the page to refresh.\r\n        e.preventDefault();\r\n\r\n        if (password !== passwordConfirm) {\r\n            console.log('Passwords do not match');\r\n        } else {\r\n\r\n            console.log(formData);\r\n            //Creates object using variable that stored the form data\r\n            const registerUser = {\r\n                name,\r\n                email,\r\n                password\r\n            }\r\n            try {\r\n                //Sets headers for the post\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n                //Converts JS object to JSON string format\r\n                const body = JSON.stringify(registerUser);\r\n                //Runs function and stores response\r\n                const res = await axios.post('/api/users', body, config);\r\n                console.log(res.data);\r\n            } catch (err) {\r\n                console.error(err.response.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <h1>Sign Up</h1>\r\n            <form onSubmit={e => formSubmit(e)}>\r\n                <label>Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Name\"\r\n                    value={name}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Email</label>\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email Address\"\r\n                    value={email}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Verify Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"passwordConfirm\"\r\n                    placeholder=\"Verify Password\"\r\n                    value={passwordConfirm}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <input type=\"submit\" />\r\n            </form>\r\n            <UniversityList onChange={this.dropdownChange} state={dropdown} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}