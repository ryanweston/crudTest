{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanl\\\\Desktop\\\\crudTest\\\\client\\\\src\\\\components\\\\auth\\\\Register.js\";\nimport React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport UniversityList from './UniversityList';\nimport { setAlert } from '../../actions/alert';\nimport PropTypes from 'prop-types';\n\nconst Register = ({\n  setAlert,\n  universities,\n  loading\n}) => {\n  // use state initialises objects default format. hook runs function on the given object\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    passwordConfirm: ''\n  });\n  const [dropdown, setDropdown] = useState({\n    selected: ''\n  });\n  console.log(universities);\n\n  const formChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const dropdownChange = e => setDropdown({ ...dropdown,\n    selected: e.target.value\n  });\n\n  const universityCheck = [];\n\n  function universityChecker() {\n    for (var i = 0; i < universities[0].length; i++) {\n      var obj = universities[0][i]._id;\n      universityCheck.push(obj);\n    }\n  }\n\n  const {\n    name,\n    email,\n    password,\n    passwordConfirm\n  } = formData;\n  const university = dropdown.selected; // function runs from event, changing relevant form data for each input by selected name and it's corresponding value\n  // ... operator preserves previous data from form, only changing states of given input\n\n  const onSubmit = async e => {\n    //Prevents default HTML handling, in this instance causing the page to refresh.\n    e.preventDefault();\n    console.log('cool');\n    universityChecker();\n\n    if (password !== passwordConfirm) {\n      setAlert('Passwords do not match', 'danger');\n    } else if (universityCheck.indexOf(university) === -1) {\n      setAlert('Select your university', 'danger');\n    } else {\n      //Creates object using variable that stored the form data\n      const registerUser = {\n        name,\n        email,\n        password,\n        university\n      };\n      console.log(registerUser);\n\n      try {\n        //Sets headers for the post\n        const config = {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }; //Converts JS object to JSON string format\n\n        const body = JSON.stringify(registerUser); //Runs function and stores response\n\n        const res = await axios.post('/api/users', body, config);\n        console.log(res.data);\n      } catch (err) {\n        console.error(err.response.data);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => onSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, \"Name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Name\",\n    value: name,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email Address\",\n    value: email,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, \"Verify Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"passwordConfirm\",\n    placeholder: \"Verify Password\",\n    value: passwordConfirm,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  })), loading || !universities ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 42\n    }\n  }, \"loading...\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 68\n    }\n  }, /*#__PURE__*/React.createElement(UniversityList, {\n    onValueChange: dropdownChange,\n    options: universities[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  })));\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired\n};\n\nconst mapStatesToProps = state => {\n  return {\n    universities: state.uniFetch.universities,\n    loading: state.uniFetch.loading\n  };\n};\n\nexport default connect(mapStatesToProps, {\n  setAlert\n})(Register);","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/components/auth/Register.js"],"names":["React","Fragment","useState","connect","axios","UniversityList","setAlert","PropTypes","Register","universities","loading","formData","setFormData","name","email","password","passwordConfirm","dropdown","setDropdown","selected","console","log","formChange","e","target","value","dropdownChange","universityCheck","universityChecker","i","length","obj","_id","push","university","onSubmit","preventDefault","indexOf","registerUser","config","headers","body","JSON","stringify","res","post","data","err","error","response","propTypes","func","isRequired","mapStatesToProps","state","uniFetch"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport UniversityList from './UniversityList';\r\nimport { setAlert } from '../../actions/alert';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Register = ({ setAlert, universities, loading }) => {\r\n    // use state initialises objects default format. hook runs function on the given object\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        passwordConfirm: ''\r\n    });\r\n\r\n    const [dropdown, setDropdown] = useState({\r\n        selected: ''\r\n    })\r\n\r\n    console.log(universities);\r\n\r\n    const formChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    const dropdownChange = e => setDropdown({ ...dropdown, selected: e.target.value });\r\n\r\n    const universityCheck = [];\r\n    function universityChecker() {\r\n        for (var i = 0; i < universities[0].length; i++) {\r\n            var obj = universities[0][i]._id;\r\n            universityCheck.push(obj);\r\n        }\r\n    }\r\n\r\n    const { name, email, password, passwordConfirm } = formData;\r\n    const university = dropdown.selected;\r\n\r\n\r\n    // function runs from event, changing relevant form data for each input by selected name and it's corresponding value\r\n    // ... operator preserves previous data from form, only changing states of given input\r\n\r\n    const onSubmit = async e => {\r\n        //Prevents default HTML handling, in this instance causing the page to refresh.\r\n        e.preventDefault();\r\n\r\n        console.log('cool');\r\n\r\n        universityChecker();\r\n\r\n        if (password !== passwordConfirm) {\r\n            setAlert('Passwords do not match', 'danger');\r\n        } else if (universityCheck.indexOf(university) === -1) {\r\n            setAlert('Select your university', 'danger');\r\n        } else {\r\n            //Creates object using variable that stored the form data\r\n            const registerUser = {\r\n                name,\r\n                email,\r\n                password,\r\n                university\r\n            }\r\n\r\n            console.log(registerUser);\r\n            try {\r\n                //Sets headers for the post\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n                //Converts JS object to JSON string format\r\n                const body = JSON.stringify(registerUser);\r\n                //Runs function and stores response\r\n                const res = await axios.post('/api/users', body, config);\r\n                console.log(res.data);\r\n            } catch (err) {\r\n                console.error(err.response.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <h1>Sign Up</h1>\r\n            <form onSubmit={e => onSubmit(e)}>\r\n                <label>Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Name\"\r\n                    value={name}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Email</label>\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email Address\"\r\n                    value={email}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Verify Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"passwordConfirm\"\r\n                    placeholder=\"Verify Password\"\r\n                    value={passwordConfirm}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <input type=\"submit\" />\r\n            </form>\r\n            {loading || !universities ? (<div>loading...</div>) : (<div>\r\n                <UniversityList onValueChange={dropdownChange} options={universities[0]} />\r\n            </div>)\r\n            }\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nRegister.propTypes = {\r\n    setAlert: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStatesToProps = state => {\r\n    return {\r\n        universities: state.uniFetch.universities,\r\n        loading: state.uniFetch.loading\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStatesToProps, { setAlert })(Register);"]},"metadata":{},"sourceType":"module"}