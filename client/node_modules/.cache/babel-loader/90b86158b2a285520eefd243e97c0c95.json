{"ast":null,"code":"import { GET_USER_INFO, POST_SUCCESS, POST_FAILURE, POST_BEGIN } from './types';\nimport axios from 'axios';\nexport const getUserInfo = () => async dispatch => {\n  try {\n    console.log('Get user information dispatch initiated');\n    const res = await axios.get('api/dashboard');\n    const response = JSON.stringify(res.data.user);\n    dispatch({\n      type: GET_USER_INFO,\n      payload: response\n    });\n  } catch (err) {}\n};\nexport const postReview = scores => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = {\n    scores\n  };\n\n  try {\n    dispatch(postBegin());\n    console.log(body);\n    const res = await axios.post('api/reviews', body, config);\n    console.log(res.data);\n    dispatch(postSuccess(res.data));\n  } catch (err) {\n    console.log(err.response.data.errors);\n    dispatch(postFailure(err.response.data.errors));\n  }\n};\nexport const postBegin = () => ({\n  type: POST_BEGIN\n});\nexport const postSuccess = response => ({\n  type: POST_SUCCESS,\n  payload: response\n});\nexport const postFailure = error => ({\n  type: POST_FAILURE,\n  payload: error\n});","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/actions/dashboard.js"],"names":["GET_USER_INFO","POST_SUCCESS","POST_FAILURE","POST_BEGIN","axios","getUserInfo","dispatch","console","log","res","get","response","JSON","stringify","data","user","type","payload","err","postReview","scores","config","headers","body","postBegin","post","postSuccess","errors","postFailure","error"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,YAAxB,EAAsCC,YAAtC,EAAoDC,UAApD,QAAsE,SAAtE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC/C,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,UAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,eAAV,CAAlB;AACA,UAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACK,IAAJ,CAASC,IAAxB,CAAjB;AACAT,IAAAA,QAAQ,CAAC;AACLU,MAAAA,IAAI,EAAEhB,aADD;AAELiB,MAAAA,OAAO,EAAEN;AAFJ,KAAD,CAAR;AAIH,GARD,CAQE,OAAOO,GAAP,EAAY,CACb;AACJ,CAXM;AAaP,OAAO,MAAMC,UAAU,GAAIC,MAAD,IAAY,MAAMd,QAAN,IAAkB;AACpD,QAAMe,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAKA,QAAMC,IAAI,GAAG;AAAEH,IAAAA;AAAF,GAAb;;AACA,MAAI;AACAd,IAAAA,QAAQ,CAACkB,SAAS,EAAV,CAAR;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYe,IAAZ;AACA,UAAMd,GAAG,GAAG,MAAML,KAAK,CAACqB,IAAN,CAAW,aAAX,EAA0BF,IAA1B,EAAgCF,MAAhC,CAAlB;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAG,CAACK,IAAhB;AACAR,IAAAA,QAAQ,CAACoB,WAAW,CAACjB,GAAG,CAACK,IAAL,CAAZ,CAAR;AACH,GAND,CAME,OAAOI,GAAP,EAAY;AACVX,IAAAA,OAAO,CAACC,GAAR,CAAYU,GAAG,CAACP,QAAJ,CAAaG,IAAb,CAAkBa,MAA9B;AACArB,IAAAA,QAAQ,CAACsB,WAAW,CAACV,GAAG,CAACP,QAAJ,CAAaG,IAAb,CAAkBa,MAAnB,CAAZ,CAAR;AACH;AACJ,CAjBM;AAmBP,OAAO,MAAMH,SAAS,GAAG,OAAO;AAC5BR,EAAAA,IAAI,EAAEb;AADsB,CAAP,CAAlB;AAIP,OAAO,MAAMuB,WAAW,GAAIf,QAAD,KAAe;AACtCK,EAAAA,IAAI,EAAEf,YADgC;AAEtCgB,EAAAA,OAAO,EAAEN;AAF6B,CAAf,CAApB;AAKP,OAAO,MAAMiB,WAAW,GAAIC,KAAD,KAAY;AACnCb,EAAAA,IAAI,EAAEd,YAD6B;AAEnCe,EAAAA,OAAO,EAAEY;AAF0B,CAAZ,CAApB","sourcesContent":["import { GET_USER_INFO, POST_SUCCESS, POST_FAILURE, POST_BEGIN } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const getUserInfo = () => async dispatch => {\r\n    try {\r\n        console.log('Get user information dispatch initiated');\r\n        const res = await axios.get('api/dashboard');\r\n        const response = JSON.stringify(res.data.user);\r\n        dispatch({\r\n            type: GET_USER_INFO,\r\n            payload: response\r\n        })\r\n    } catch (err) {\r\n    }\r\n}\r\n\r\nexport const postReview = (scores) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n    const body = { scores };\r\n    try {\r\n        dispatch(postBegin());\r\n        console.log(body);\r\n        const res = await axios.post('api/reviews', body, config);\r\n        console.log(res.data);\r\n        dispatch(postSuccess(res.data));\r\n    } catch (err) {\r\n        console.log(err.response.data.errors)\r\n        dispatch(postFailure(err.response.data.errors));\r\n    }\r\n}\r\n\r\nexport const postBegin = () => ({\r\n    type: POST_BEGIN,\r\n})\r\n\r\nexport const postSuccess = (response) => ({\r\n    type: POST_SUCCESS,\r\n    payload: response\r\n})\r\n\r\nexport const postFailure = (error) => ({\r\n    type: POST_FAILURE,\r\n    payload: error\r\n})\r\n"]},"metadata":{},"sourceType":"module"}