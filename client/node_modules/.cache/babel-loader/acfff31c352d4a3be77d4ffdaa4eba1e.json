{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanl\\\\Desktop\\\\crudTest\\\\client\\\\src\\\\components\\\\template\\\\Landpage.js\";\nimport React, { Fragment, useState } from 'react';\nimport UniversityView from './UniversityView';\nimport { connect } from 'react-redux';\nimport images from './images.js';\nimport emojis from './emojis.js';\nimport SortDropdown from './SortDropdown';\n\nconst Landpage = props => {\n  const [modalInfo, modalChange] = useState({\n    modalOpen: false,\n    details: null\n  });\n  const [sort, sortSelect] = useState({\n    type: 'total',\n    emoji: '⭐'\n  });\n\n  const openSelection = e => {\n    const selected = e.currentTarget.value;\n    const data = universityCheck.find(x => x._id === selected);\n    handleModalOpen(data);\n  };\n\n  const handleModalOpen = data => {\n    modalChange(prevState => {\n      if (modalInfo.modelOpen === true) {\n        console.log('opened');\n        document.body.style.filter = 'blur(4px)';\n      }\n\n      return {\n        modalOpen: !prevState.modalOpen,\n        details: data\n      };\n    });\n  };\n\n  const changeSort = e => sortSelect({\n    type: e.target.value,\n    emoji: e.target.emoji\n  });\n\n  console.log(modalInfo);\n  const universityCheck = [];\n\n  if (!props.loading) {\n    function universityChecker() {\n      for (var i = 0; i < props.universities[0].length; i++) {\n        var obj = props.universities[0][i];\n        universityCheck.push(obj);\n      }\n    }\n\n    function sortBy(type) {\n      return function (a, b) {\n        return a.scores[type] > b.scores[type] ? -1 : 1;\n      };\n    }\n\n    universityChecker();\n    universityCheck.sort(sortBy(sort.type));\n  }\n\n  return (//Renders landpage after app level state fetch has been returned\n    !props.loading ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(UniversityView, {\n      details: modalInfo.details,\n      currentState: modalInfo.modalOpen,\n      handleModalOpen: handleModalOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, \"FIND YOUR UNIVERSITY BASED ON SOCIAL SCORE & QUALITY OF LIFE FEEDBACK FROM REAL STUDENTS\"), /*#__PURE__*/React.createElement(SortDropdown, {\n      sortChange: changeSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"landing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, universityCheck.map((obj, index) => {\n      //Returns key and value from images array that matches img id in database\n      const uniImage = images.filter(images => images.id === obj.img); //Returns emoji value from array depending on the sort type\n\n      const dataEmoji = emojis.filter(emojis => emojis.type === sort.type);\n      console.log(dataEmoji[0].emoji);\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: \"landingButton\",\n        key: index,\n        value: obj._id,\n        onClick: e => {\n          openSelection(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 32\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content\",\n        style: {\n          backgroundImage: \"url(\" + uniImage[0].src + \")\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ranking\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 33\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 56\n        }\n      }, \"#\", index + 1, \"  \", obj.name)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"score\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 56\n        }\n      }, dataEmoji[0].emoji, \" \", obj.scores[sort.type].toFixed(2), \" / 5\"))));\n    }))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }, \"LOADING\"))\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.uniFetch.loading,\n    universities: state.uniFetch.universities\n  };\n};\n\nexport default connect(mapStateToProps)(Landpage);","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/components/template/Landpage.js"],"names":["React","Fragment","useState","UniversityView","connect","images","emojis","SortDropdown","Landpage","props","modalInfo","modalChange","modalOpen","details","sort","sortSelect","type","emoji","openSelection","e","selected","currentTarget","value","data","universityCheck","find","x","_id","handleModalOpen","prevState","modelOpen","console","log","document","body","style","filter","changeSort","target","loading","universityChecker","i","universities","length","obj","push","sortBy","a","b","scores","map","index","uniImage","id","img","dataEmoji","backgroundImage","src","name","toFixed","mapStateToProps","state","uniFetch"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport UniversityView from './UniversityView';\r\nimport { connect } from 'react-redux';\r\nimport images from './images.js';\r\nimport emojis from './emojis.js';\r\nimport SortDropdown from './SortDropdown';\r\n\r\nconst Landpage = (props) => {\r\n\r\n    const [modalInfo, modalChange] = useState({\r\n        modalOpen: false,\r\n        details: null,\r\n\r\n    })\r\n\r\n    const [sort, sortSelect] = useState({\r\n        type: 'total',\r\n        emoji: '⭐'\r\n    });\r\n\r\n    const openSelection = (e) => {\r\n        const selected = e.currentTarget.value;\r\n        const data = universityCheck.find(x => x._id === selected);\r\n        handleModalOpen(data);\r\n    }\r\n\r\n    const handleModalOpen = (data) => {\r\n        modalChange((prevState) => {\r\n            if (modalInfo.modelOpen === true) {\r\n                console.log('opened');\r\n                document.body.style.filter = 'blur(4px)';\r\n            }\r\n            return {\r\n                modalOpen: !prevState.modalOpen,\r\n                details: data\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    const changeSort = (e) => sortSelect({ type: e.target.value, emoji: e.target.emoji });\r\n\r\n\r\n    console.log(modalInfo);\r\n    const universityCheck = [];\r\n    if (!props.loading) {\r\n        function universityChecker() {\r\n            for (var i = 0; i < props.universities[0].length; i++) {\r\n                var obj = props.universities[0][i];\r\n                universityCheck.push(obj);\r\n            }\r\n        }\r\n\r\n        function sortBy(type) {\r\n            return function (a, b) {\r\n                return a.scores[type] > b.scores[type] ? -1 : 1;\r\n            }\r\n        }\r\n        universityChecker();\r\n        universityCheck.sort(sortBy(sort.type));\r\n    }\r\n\r\n\r\n    return (\r\n        //Renders landpage after app level state fetch has been returned\r\n        (!props.loading ? (\r\n            < Fragment >\r\n                <Fragment>\r\n                    <UniversityView\r\n                        details={modalInfo.details}\r\n                        currentState={modalInfo.modalOpen}\r\n                        handleModalOpen={handleModalOpen}>\r\n                    </UniversityView >\r\n                </Fragment>\r\n                <div className=\"header\">\r\n                    <h1>FIND YOUR UNIVERSITY BASED ON SOCIAL SCORE & QUALITY OF LIFE FEEDBACK FROM REAL STUDENTS</h1>\r\n                    <SortDropdown sortChange={changeSort} />\r\n                </div>\r\n                <div>\r\n\r\n                </div>\r\n\r\n                <section className=\"landing\">\r\n\r\n                    {universityCheck.map((obj, index) => {\r\n                        //Returns key and value from images array that matches img id in database\r\n                        const uniImage = images.filter(images => images.id === obj.img);\r\n                        //Returns emoji value from array depending on the sort type\r\n                        const dataEmoji = emojis.filter(emojis => emojis.type === sort.type);\r\n                        console.log(dataEmoji[0].emoji)\r\n\r\n                        return <button className=\"landingButton\" key={index} value={obj._id} onClick={e => { openSelection(e) }}>\r\n\r\n                            <div className=\"content\" style={{ backgroundImage: \"url(\" + uniImage[0].src + \")\" }}>\r\n                            </div>\r\n                            <div className=\"ranking\"></div>\r\n                            <div className=\"text\">\r\n                                <div className=\"name\"> <p>#{index + 1}  {obj.name}</p></div>\r\n                                <div className=\"score\"><p>{dataEmoji[0].emoji} {obj.scores[sort.type].toFixed(2)} / 5</p></div>\r\n                            </div>\r\n\r\n\r\n                        </button>\r\n\r\n                    })}\r\n                </section>\r\n\r\n            </Fragment >\r\n        ) : (<div><h1>LOADING</h1></div>))\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.uniFetch.loading,\r\n        universities: state.uniFetch.universities\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Landpage);\r\n"]},"metadata":{},"sourceType":"module"}