{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { setHeader } from './actions/login';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nconst currentState = {\n  isAuthenticated: null,\n  token: null,\n  loading: true,\n  user: null\n};\nstore.subscribe(() => {\n  let prevState = currentState;\n  currentState = store.getState();\n\n  if (prevState.register.token !== currentState.register.token) {\n    token = currentState.register.token;\n    setHeader(token);\n  }\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setHeader","initialState","middleware","store","currentState","isAuthenticated","token","loading","user","subscribe","prevState","getState","register"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;AAEA,MAAMK,KAAK,GAAGR,WAAW,CACrBI,WADqB,EAErBE,YAFqB,EAGrBJ,mBAAmB,CAACD,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAHE,CAAzB;AAMA,MAAME,YAAY,GAAG;AACjBC,EAAAA,eAAe,EAAE,IADA;AACMC,EAAAA,KAAK,EAAE,IADb;AACmBC,EAAAA,OAAO,EAAE,IAD5B;AACkCC,EAAAA,IAAI,EAAE;AADxC,CAArB;AAIAL,KAAK,CAACM,SAAN,CAAgB,MAAM;AAClB,MAAIC,SAAS,GAAGN,YAAhB;AACAA,EAAAA,YAAY,GAAGD,KAAK,CAACQ,QAAN,EAAf;;AACA,MAAID,SAAS,CAACE,QAAV,CAAmBN,KAAnB,KAA6BF,YAAY,CAACQ,QAAb,CAAsBN,KAAvD,EAA8D;AAC1DA,IAAAA,KAAK,GAAGF,YAAY,CAACQ,QAAb,CAAsBN,KAA9B;AACAN,IAAAA,SAAS,CAACM,KAAD,CAAT;AACH;AACJ,CAPD;AASA,eAAeH,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\nimport { setHeader } from './actions/login';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nconst currentState = {\r\n    isAuthenticated: null, token: null, loading: true, user: null\r\n}\r\n\r\nstore.subscribe(() => {\r\n    let prevState = currentState;\r\n    currentState = store.getState();\r\n    if (prevState.register.token !== currentState.register.token) {\r\n        token = currentState.register.token;\r\n        setHeader(token);\r\n    }\r\n})\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}