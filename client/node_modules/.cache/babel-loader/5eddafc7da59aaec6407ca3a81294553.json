{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanl\\\\Desktop\\\\crudTest\\\\client\\\\src\\\\components\\\\auth\\\\Register.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport UniversityList from './UniversityList';\nimport { setAlert } from '../../actions/alert';\nimport PropTypes from 'prop-types';\n\nconst Register = ({\n  setAlert\n}) => {\n  // use state initialises objects default format. hook runs function on the given object\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    passwordConfirm: ''\n  }); // state = {\n  //     loading: true,\n  //     options: [null],\n  //     selected: ''\n  // }\n\n  const [dropdown, setDropdown] = useState({\n    loading: true,\n    options: [null],\n    selected: ''\n  }); //Will run error declaring missing dependacy, however I only want the function to run once after render,\n  //so warning should be ignored.\n\n  useEffect(() => {\n    const fetchList = async () => {\n      try {\n        const response = await axios.get('/api/university'); // Recieved errors in get reponse, had to convert to string to place in JS object array.\n\n        const string = JSON.stringify(response.data.list);\n        const uni = JSON.parse(string); // Fills options with JSON request then sets loading to false which can be checked against\n\n        setDropdown({\n          selected: '',\n          options: uni,\n          loading: false\n        });\n      } catch (err) {}\n    };\n\n    fetchList();\n  }, []);\n  useEffect(() => {\n    return () => {\n      console.log(\"cleaned up\");\n    };\n  }, []);\n  const universityCheck = [];\n\n  function universityChecker() {\n    for (var i = 0; i < dropdown.options.length; i++) {\n      var obj = dropdown.options[i]._id;\n      universityCheck.push(obj);\n    }\n  } // Checks agains the amount of times the uni data is called\n  // if (dropdown.loading === false) {\n  //     console.log(dropdown);\n  // }\n\n\n  const {\n    name,\n    email,\n    password,\n    passwordConfirm\n  } = formData;\n  const university = dropdown.selected; // function runs from event, changing relevant form data for each input by selected name and it's corresponding value\n  // ... operator preserves previous data from form, only changing states of given input\n\n  const formChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const dropdownChange = e => setDropdown({ ...dropdown,\n    selected: e.target.value\n  });\n\n  const formSubmit = async e => {\n    //Prevents default HTML handling, in this instance causing the page to refresh.\n    e.preventDefault();\n    universityChecker();\n\n    if (password !== passwordConfirm) {\n      setAlert('Passwords do not match', 'danger');\n    } else if (universityCheck.indexOf(university) === -1) {\n      console.log('Select your university' + universityCheck);\n    } else {\n      //Creates object using variable that stored the form data\n      const registerUser = {\n        name,\n        email,\n        password,\n        university\n      };\n      console.log(registerUser);\n\n      try {\n        //Sets headers for the post\n        const config = {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }; //Converts JS object to JSON string format\n\n        const body = JSON.stringify(registerUser); //Runs function and stores response\n\n        const res = await axios.post('/api/users', body, config);\n        console.log(res.data);\n      } catch (err) {\n        console.error(err.response.data);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Sign Up\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => formSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, \"Name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Name\",\n    value: name,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email Address\",\n    value: email,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \"Verify Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    name: \"passwordConfirm\",\n    placeholder: \"Verify Password\",\n    value: passwordConfirm,\n    onChange: e => formChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(UniversityList, {\n    onValueChange: dropdownChange,\n    state: dropdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }));\n};\n\nRegister.PropTypes = {\n  setAlert: PropTypes.func.isRequired\n};\nexport default connect(null, setAlert)(Register);","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/components/auth/Register.js"],"names":["React","Fragment","useState","useEffect","connect","axios","UniversityList","setAlert","PropTypes","Register","formData","setFormData","name","email","password","passwordConfirm","dropdown","setDropdown","loading","options","selected","fetchList","response","get","string","JSON","stringify","data","list","uni","parse","err","console","log","universityCheck","universityChecker","i","length","obj","_id","push","university","formChange","e","target","value","dropdownChange","formSubmit","preventDefault","indexOf","registerUser","config","headers","body","res","post","error","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport axios from 'axios';\r\nimport UniversityList from './UniversityList';\r\nimport { setAlert } from '../../actions/alert';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Register = ({ setAlert }) => {\r\n    // use state initialises objects default format. hook runs function on the given object\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        passwordConfirm: ''\r\n    });\r\n\r\n    // state = {\r\n    //     loading: true,\r\n    //     options: [null],\r\n    //     selected: ''\r\n    // }\r\n\r\n    const [dropdown, setDropdown] = useState({\r\n        loading: true,\r\n        options: [null],\r\n        selected: ''\r\n    })\r\n\r\n    //Will run error declaring missing dependacy, however I only want the function to run once after render,\r\n    //so warning should be ignored.\r\n\r\n    useEffect(() => {\r\n        const fetchList = async () => {\r\n            try {\r\n                const response = await axios.get('/api/university');\r\n                // Recieved errors in get reponse, had to convert to string to place in JS object array.\r\n                const string = JSON.stringify(response.data.list);\r\n                const uni = JSON.parse(string);\r\n                // Fills options with JSON request then sets loading to false which can be checked against\r\n                setDropdown({ selected: '', options: uni, loading: false });\r\n            } catch (err) {\r\n            }\r\n        }\r\n        fetchList();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            console.log(\"cleaned up\");\r\n        };\r\n    }, []);\r\n\r\n    const universityCheck = [];\r\n    function universityChecker() {\r\n        for (var i = 0; i < dropdown.options.length; i++) {\r\n            var obj = dropdown.options[i]._id;\r\n            universityCheck.push(obj);\r\n        }\r\n    }\r\n\r\n    // Checks agains the amount of times the uni data is called\r\n    // if (dropdown.loading === false) {\r\n    //     console.log(dropdown);\r\n    // }\r\n\r\n\r\n\r\n    const { name, email, password, passwordConfirm } = formData;\r\n    const university = dropdown.selected;\r\n\r\n\r\n    // function runs from event, changing relevant form data for each input by selected name and it's corresponding value\r\n    // ... operator preserves previous data from form, only changing states of given input\r\n    const formChange = e => setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    const dropdownChange = e => setDropdown({ ...dropdown, selected: e.target.value });\r\n\r\n    const formSubmit = async e => {\r\n        //Prevents default HTML handling, in this instance causing the page to refresh.\r\n        e.preventDefault();\r\n\r\n        universityChecker();\r\n\r\n        if (password !== passwordConfirm) {\r\n            setAlert('Passwords do not match', 'danger');\r\n        } else if (universityCheck.indexOf(university) === -1) {\r\n            console.log('Select your university' + universityCheck);\r\n        } else {\r\n            //Creates object using variable that stored the form data\r\n            const registerUser = {\r\n                name,\r\n                email,\r\n                password,\r\n                university\r\n            }\r\n\r\n            console.log(registerUser);\r\n            try {\r\n                //Sets headers for the post\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                }\r\n                //Converts JS object to JSON string format\r\n                const body = JSON.stringify(registerUser);\r\n                //Runs function and stores response\r\n                const res = await axios.post('/api/users', body, config);\r\n                console.log(res.data);\r\n            } catch (err) {\r\n                console.error(err.response.data);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <h1>Sign Up</h1>\r\n            <form onSubmit={e => formSubmit(e)}>\r\n                <label>Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    placeholder=\"Name\"\r\n                    value={name}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Email</label>\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email Address\"\r\n                    value={email}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <label>Verify Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"passwordConfirm\"\r\n                    placeholder=\"Verify Password\"\r\n                    value={passwordConfirm}\r\n                    onChange={e => formChange(e)}\r\n                />\r\n                <input type=\"submit\" />\r\n            </form>\r\n            <UniversityList onValueChange={dropdownChange} state={dropdown} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nRegister.PropTypes = {\r\n    setAlert: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(null, setAlert)(Register);"]},"metadata":{},"sourceType":"module"}