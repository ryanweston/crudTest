{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanl\\\\Desktop\\\\crudTest\\\\client\\\\src\\\\components\\\\template\\\\Landpage.js\";\nimport React, { Fragment, useState } from 'react';\nimport UniversityView from './UniversityView';\nimport { connect } from 'react-redux';\n\nconst Landpage = props => {\n  const [modalInfo, modalChange] = useState({\n    modalOpen: false,\n    details: null\n  });\n\n  const openSelection = e => {\n    const selected = e.currentTarget.value;\n    const data = props.universities[0].find(x => x._id === selected);\n    handleModalOpen(data); // modalChange({ ...modalInfo, details: data })\n  };\n\n  const handleModalOpen = data => {\n    modalChange(prevState => {\n      return {\n        modalOpen: !prevState.modalOpen,\n        details: data\n      };\n    });\n  };\n\n  console.log(modalInfo); // if (!props.loading) {\n  //     const universityCheck = [];\n  //     function universityChecker() {\n  //         for (var i = 0; i < props.universities[0].length; i++) {\n  //             var obj = props.universities[0][i];\n  //             universityCheck.push(obj);\n  //         }\n  //     }\n  //     universityChecker();\n  //     if (universityCheck[1]) {\n  //         console.log(universityCheck.sort((a, b) => (a.scores[0].nightlife > b.scores[0].nightlife) ? -1 : 1))\n  //     }\n  //     // console.log(props.universities.sort(compare()))\n  //     // const newData = universityCheck.sort((a, b) => (a.scores[0].nightlife > b.scores[0].nightlife) ? -1 : 1);\n  //     // console.log(universityCheck[0].scores[0].nightlife);\n  //     // universitySort();\n  //     // console.log(universitySort);\n  // }\n\n  return (//Renders landpage after app level state fetch has been returned\n    !props.loading ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(UniversityView, {\n      details: modalInfo.details,\n      currentState: modalInfo.modalOpen,\n      handleModalOpen: handleModalOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, \"FIND YOUR UNIVERSITY BASED ON SOCIAL SCORES & QUALITY OF LIFE FEEDBACK FROM REAL STUDENTS\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gridContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"landing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, props.universities[0].map((obj, index) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: \"universityContainer\",\n        key: index,\n        value: obj._id,\n        onClick: e => {\n          openSelection(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 36\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"name\",\n        key: obj._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 37\n        }\n      }, \"#\", index + 1, \"  \", obj.name)), Object.keys(obj.scores.total).map(function (points, index) {\n        // return <div className=\"points\" key={index}> <b>{points.total.toFixed(2)} / 5</b> </div>\n        console.log(obj.scores.total[points]);\n      }));\n    })))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 19\n      }\n    }, \"LOADING\"))\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.uniFetch.loading,\n    universities: state.uniFetch.universities\n  };\n};\n\nexport default connect(mapStateToProps)(Landpage);","map":{"version":3,"sources":["C:/Users/ryanl/Desktop/crudTest/client/src/components/template/Landpage.js"],"names":["React","Fragment","useState","UniversityView","connect","Landpage","props","modalInfo","modalChange","modalOpen","details","openSelection","e","selected","currentTarget","value","data","universities","find","x","_id","handleModalOpen","prevState","console","log","loading","map","obj","index","name","Object","keys","scores","total","points","mapStateToProps","state","uniFetch"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport UniversityView from './UniversityView';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst Landpage = (props) => {\r\n\r\n    const [modalInfo, modalChange] = useState({\r\n        modalOpen: false,\r\n        details: null\r\n    })\r\n\r\n    const openSelection = (e) => {\r\n        const selected = e.currentTarget.value;\r\n        const data = props.universities[0].find(x => x._id === selected);\r\n        handleModalOpen(data);\r\n        // modalChange({ ...modalInfo, details: data })\r\n    }\r\n\r\n    const handleModalOpen = (data) => {\r\n        modalChange((prevState) => {\r\n            return {\r\n                modalOpen: !prevState.modalOpen,\r\n                details: data\r\n            }\r\n        })\r\n    }\r\n\r\n    console.log(modalInfo);\r\n\r\n    // if (!props.loading) {\r\n    //     const universityCheck = [];\r\n    //     function universityChecker() {\r\n    //         for (var i = 0; i < props.universities[0].length; i++) {\r\n    //             var obj = props.universities[0][i];\r\n    //             universityCheck.push(obj);\r\n    //         }\r\n    //     }\r\n\r\n    //     universityChecker();\r\n    //     if (universityCheck[1]) {\r\n    //         console.log(universityCheck.sort((a, b) => (a.scores[0].nightlife > b.scores[0].nightlife) ? -1 : 1))\r\n    //     }\r\n    //     // console.log(props.universities.sort(compare()))\r\n    //     // const newData = universityCheck.sort((a, b) => (a.scores[0].nightlife > b.scores[0].nightlife) ? -1 : 1);\r\n    //     // console.log(universityCheck[0].scores[0].nightlife);\r\n    //     // universitySort();\r\n    //     // console.log(universitySort);\r\n    // }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        //Renders landpage after app level state fetch has been returned\r\n        (!props.loading ? (\r\n            < Fragment >\r\n                <Fragment>\r\n                    <UniversityView\r\n                        details={modalInfo.details}\r\n                        currentState={modalInfo.modalOpen}\r\n                        handleModalOpen={handleModalOpen}>\r\n                    </UniversityView >\r\n                </Fragment>\r\n                <div className=\"header\">\r\n                    <h1>FIND YOUR UNIVERSITY BASED ON SOCIAL SCORES\r\n& QUALITY OF LIFE FEEDBACK FROM REAL STUDENTS</h1>\r\n                </div>\r\n                < div className=\"gridContainer\" >\r\n                    <section className=\"landing\">\r\n                        {props.universities[0].map((obj, index) => {\r\n                            return <button className=\"universityContainer\" key={index} value={obj._id} onClick={e => { openSelection(e) }}>\r\n                                <div className=\"name\" key={obj._id}>\r\n                                    <p>#{index + 1}  {obj.name}</p>\r\n                                </div>\r\n                                {/* {obj.scores.map((points) => {\r\n                                    return <div className=\"points\" key={index}> <b>{points.total.toFixed(2)} / 5</b> </div>\r\n                                }\r\n                                )} */}\r\n                                {Object.keys(obj.scores.total).map(function (points, index) {\r\n                                    // return <div className=\"points\" key={index}> <b>{points.total.toFixed(2)} / 5</b> </div>\r\n                                    console.log(obj.scores.total[points]);\r\n                                })}\r\n                            </button>\r\n                        })}\r\n                    </section>\r\n                </div >\r\n            </Fragment >\r\n        ) : (<div><h1>LOADING</h1></div>))\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.uniFetch.loading,\r\n        universities: state.uniFetch.universities\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Landpage);\r\n"]},"metadata":{},"sourceType":"module"}